//////////////////////////////////////////////////////////////////////////////
//  
//  <sourcefile name="UtilityReportTab.cs" creationdate="3/3/09" owner="anasa" >
//
//      <project>McKinstry TCO Application</project>
//  
//      <description>The tab page for Utility report area in tool</description>
//      
//      <copyright year="2008" company="McKinstry">
//          <notice>
//              Copyright © 2008 McKinstry. All rights reserved
//  
//              Developed for McKinstry by
//                  Equiom - MENA
//                  www.equiom.com
//          </notice>
//  
//  	<history date="3/3/09" modby="anasa">created</history>
//  
//////////////////////////////////////////////////////////////////////////////

#region Library Calls

//---------------------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Linq;
using System.Windows.Forms;
using System.Xml;
using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.DXErrorProvider;
using DevExpress.XtraPrinting.Native;
using Equiom.Tco.BusinessLogicLayer;
using Equiom.Tco.DataAccessLayer;
using TCO.DesktopClientDevexpress.Properties;
using Application=Equiom.Tco.Common.Application;

//---------------------------------------------------------------------------------------------

#endregion

namespace TCO.DesktopClientDevexpress
{
    public partial class UtilityReportTab : XtraTabPageEntity
    {
        #region Constants

        //---------------------------------------------------------------------------------------------
        private const string DB_ERROR = "Reports couldn't be generated, database contains corrupted data.";

        private const string NO_PROJECT_SELECTED =
            "No project is selected, please select a project to generate the report for.";

        private const string NO_SCENARIO_SELECTED = "A scenario must be selected to generate the report.";

        private const string NO_UTILITY_INFO_WAS_FOUND =
            "No utility information was found for the scenario you selected.";

        private const string PROJECT_IS_NULL = "The project you selected is empty or corrupted.";

        private const string SELECTED_SCENARIO_ERROR1 = "The Scenario ";
        private const string SELECTED_SCENARIO_ERROR2 = " was deleted and won't be used in calcualtions.";
        //---------------------------------------------------------------------------------------------

        #endregion

        #region Fields

        //---------------------------------------------------------------------------------------------
        private Scenario currentScenario;
        private UtilityReport fullScreenReport;

        private bool generate = true;
        private UtilityReport rep;
        //---------------------------------------------------------------------------------------------

        #endregion

        #region Properties

        //---------------------------------------------------------------------------------------------
        public Project SelectedProject
        {
            get
            {
                if (gridLookUpEditProject.EditValue != null)
                {
                    try
                    {
                        int projectId = Convert.ToInt32(gridLookUpEditProject.EditValue);
                        Project foundProject =
                            UIBLLInteraction.Instance.ProjectsCollection.FirstOrDefault(
                                project => project.Id == projectId);
                        if (foundProject != null)
                        {
                            foundProject.LazyLoadChildren();
                        }
                        return foundProject;
                    }
                    catch (FormatException)
                    {
                        return null;
                    }
                    catch (InvalidCastException)
                    {
                        return null;
                    }
                    catch (DataAccessException)
                    {
                        return null;
                    }
                }
                return null;
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Constructors

        //---------------------------------------------------------------------------------------------
        public UtilityReportTab()
        {
            InitializeComponent();
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Methods

        #region Overriding Methods

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Initialize the binding for the controls in the tab
        /// </summary>
        public override void SetBinding()
        {
            try
            {
                EntityBarManager.Bars[1].Visible = false;
                TabTypeImage = Resources.Utilites;
                ParentTab.Image = MergeImages(false);
                gridLookUpEditProject.Properties.DataSource = UIBLLInteraction.Instance.ProjectsCollection;
                UIBLLInteraction.Instance.ProjectsCollection.RaiseListChangedEvents = true;
                UIBLLInteraction.Instance.ProjectsCollection.ListChanged += ProjectsCollection_ListChanged;
                foreach (UtilityType utility in BusinessLayerCache.Instance.GetAllUtilityTypes())
                {
                    comboBoxEditFilter.Properties.Items.Add(utility.Name);
                }
                LoadLastSelectionCriteria();
            }
            catch (DataAccessException dataAccessException)
            {
                Application.Logger.LogException(dataAccessException);
                UIBLLInteraction.Instance.ShowException(dataAccessException);
            }
        }

        /// <summary>
        /// Enables or disables the controls in the tab
        /// </summary>
        /// <param name="isReadOnly"></param>
        /// <param name="isChangedByUser"></param>
        public override void SetEditMode(bool isReadOnly, bool isChangedByUser)
        {
            //gridControlVendors.EmbeddedNavigator.Buttons.Remove.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.Append.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.Edit.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.EndEdit.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.CancelEdit.Visible = !isReadOnly;

            //gridViewVendors.OptionsBehavior.Editable = !isReadOnly;
        }

        /// <summary>
        /// Adds the current tab info to the dictionary so user can't close project without closing it first
        /// </summary>
        public override void AddParentIDToEditDictionary()
        {
            try
            {
                if (!UIBLLInteraction.Instance.OtherTabsEditDictionary.ContainsKey(TabTypes.UtilityReport))
                {
                    UIBLLInteraction.Instance.OtherTabsEditDictionary.Add(TabTypes.UtilityReport, ParentTab);
                }
            }
            catch (ArgumentException argumentException)
            {
                //UIBLLInteraction.Instance.ShowException(argumentException);
                Application.Logger.LogException(argumentException);
            }
            catch (NullReferenceException nullReferenceException)
            {
                //UIBLLInteraction.Instance.ShowException(nullReferenceException);
                Application.Logger.LogException(nullReferenceException);
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Selection Loading and update

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Loads the last selection criteria that the user selected when using the report last time
        /// </summary>
        public void LoadLastSelectionCriteria()
        {
            XmlDocument document = UIBLLInteraction.Instance.GetRecentsDocment();
            try
            {
                XmlNode currentReportNode = document.SelectSingleNode("Root/UtilityReport");
                if (currentReportNode != null)
                {
                    string value = currentReportNode.Attributes["Project"].Value;
                    if (value != "Null")
                    {
                        gridLookUpEditProject.EditValue = Convert.ToInt32(value);
                        value = currentReportNode.Attributes["Scenario"].Value;
                        if (value != "Null")
                        {
                            gridLookUpEditScenario1.EditValue = Convert.ToInt32(value);
                        }
                        value = currentReportNode.Attributes["IncludedGuaranteeMultiplier"].Value;
                        checkEditIncludeGuaranteeMultiplier.Checked = Convert.ToBoolean(value);

                        value = currentReportNode.Attributes["HideBaseColumns"].Value;
                        checkEditHideBase.Checked = Convert.ToBoolean(value);

                        value = currentReportNode.Attributes["HideSavingsColumns"].Value;
                        checkEditHideSavingsColumns.Checked = Convert.ToBoolean(value);

                        value = currentReportNode.Attributes["HideProposedColumns"].Value;
                        checkEditHideProposed.Checked = Convert.ToBoolean(value);
                    }
                }
                else
                {
                    MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (XmlException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
                //Catch exceptions during using a null value iterator
            catch (NullReferenceException nullReferenceException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Logger.LogException(nullReferenceException);
            }
        }

        /// <summary>
        /// Update the XML file containing the recent selection criteria with the current selection
        /// </summary>
        private void UpdateRecentSelection(Control control)
        {
            try
            {
                XmlDocument document = UIBLLInteraction.Instance.GetRecentsDocment();
                if (control == gridLookUpEditProject)
                {
                    document.SelectSingleNode("Root/UtilityReport").Attributes["Project"].Value =
                        (gridLookUpEditProject.EditValue == null) ? "Null" : gridLookUpEditProject.EditValue.ToString();
                }
                else if (control == gridLookUpEditScenario1)
                {
                    document.SelectSingleNode("Root/UtilityReport").Attributes["Scenario"].Value =
                        (gridLookUpEditScenario1.EditValue == null)
                            ? "Null"
                            : gridLookUpEditScenario1.EditValue.ToString();
                }
                else if (control == checkEditHideBase)
                {
                    document.SelectSingleNode("Root/UtilityReport").Attributes["HideBaseColumns"].Value =
                        checkEditHideBase.Checked.ToString();
                }
                else if (control == checkEditHideProposed)
                {
                    document.SelectSingleNode("Root/UtilityReport").Attributes["HideProposedColumns"].Value =
                        checkEditHideProposed.Checked.ToString();
                }
                else if (control == checkEditHideSavingsColumns)
                {
                    document.SelectSingleNode("Root/UtilityReport").Attributes["HideSavingsColumns"].Value =
                        checkEditHideSavingsColumns.Checked.ToString();
                }
                else if (control == checkEditIncludeGuaranteeMultiplier)
                {
                    document.SelectSingleNode("Root/UtilityReport").Attributes["IncludedGuaranteeMultiplier"].Value =
                        checkEditIncludeGuaranteeMultiplier.Checked.ToString();
                }
                document.Save(UIBLLInteraction.Instance.TCORECENTS_FILE_NAME);
            }
            catch (NullReferenceException)
            {
            }
            catch (XmlException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Update After Selection

        //---------------------------------------------------------------------------------------------
        private void UpdateProjectChildren()
        {
            if (gridLookUpEditProject.EditValue != null)
            {
                try
                {
                    if (SelectedProject != null)
                    {
                        try
                        {
                            gridLookUpEditScenario1.Properties.DataSource = SelectedProject.Scenarios;
                            gridLookUpEditScenario1.EditValue = null;
                        }
                        catch (NullReferenceException)
                        {
                        }
                        catch (DataAccessException)
                        {
                            MessageBox.Show(PROJECT_IS_NULL, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                            MessageBoxIcon.Error);
                        }
                    }
                }
                catch (NullReferenceException)
                {
                }
                catch (InvalidCastException)
                {
                }
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Report Generation

        #region Checking

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Checks the selection and if the report can be generated
        /// </summary>
        private void PerformPreGenerationCheck()
        {
            generate = true;
            if (gridLookUpEditProject.EditValue != null && SelectedProject != null)
            {
                if (gridLookUpEditScenario1.EditValue != null)
                {
                    currentScenario =
                        SelectedProject.Scenarios.FirstOrDefault(
                            scenario => scenario.Id == Convert.ToInt32(gridLookUpEditScenario1.EditValue));
                    if (currentScenario == null && gridLookUpEditScenario1.Text != null)
                    {
                        MessageBox.Show(
                            SELECTED_SCENARIO_ERROR1 + gridLookUpEditScenario1.Text + SELECTED_SCENARIO_ERROR2,
                            UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        gridLookUpEditScenario1.EditValue = null;
                        generate = false;
                    }
                }
                else
                {
                    generate = false;
                    MessageBox.Show(NO_SCENARIO_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
            }
            else
            {
                generate = false;
                MessageBox.Show(NO_PROJECT_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
            }
            GenerateUtilityReport();
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Report Generate

        //---------------------------------------------------------------------------------------------
        private void GenerateUtilityReport()
        {
            if (generate)
            {
                try
                {
                    var reflectorBar = new ReflectorBar(progressBarControl1);
                    if (SelectedProject != null && currentScenario != null)
                    {
                        var utilityReportEngine = new UtilityReportEngine();
                        BusinessObjectList<UtilityReportRecord> reportData =
                            utilityReportEngine.GetUtilityReportByScenario(currentScenario,
                                                                           checkEditIncludeGuaranteeMultiplier.Checked);
                        if (reportData.Count > 0)
                        {
                            barButtonItemFullScreen.Enabled = true;
                            rep = new UtilityReport();
                            rep.DataSource = reportData;
                            rep.ProjectName.Value = gridLookUpEditProject.Text;
                            rep.ScenarioName.Value = gridLookUpEditScenario1.Text;
                            rep.ComponentCaption.Value = "Component";
                            if (SelectedProject != null)
                            {
                                if (SelectedProject.ComponentCaption != null)
                                {
                                    if (SelectedProject.ComponentCaption != string.Empty)
                                    {
                                        rep.ComponentCaption.Value = SelectedProject.ComponentCaption;
                                    }
                                }
                            }
                            if (rep.ComponentCaption.Value == null)
                            {
                                rep.ComponentCaption.Value = "Component";
                            }
                            else if ((string) rep.ComponentCaption.Value == string.Empty)
                            {
                                rep.ComponentCaption.Value = "Component";
                            }
                            else if (rep.ComponentCaption.Value.ToString().Trim() == string.Empty)
                            {
                                rep.ComponentCaption.Value = "Component";
                            }
                            rep.GuaranteeMultiplier.Value = 1;
                            rep.IsGuaranteeMultiplierIncluded.Value = checkEditIncludeGuaranteeMultiplier.Checked;
                            rep.HideBaseColumns.Value = checkEditHideBase.Checked;
                            rep.HideSavingsColumns.Value = checkEditHideSavingsColumns.Checked;
                            rep.HideProposedColumns.Value = checkEditHideProposed.Checked;

                            rep.SetFilter((comboBoxEditFilter.EditValue == null)
                                              ? string.Empty
                                              : comboBoxEditFilter.EditValue.ToString());
                            rep.InitializeReportInfo();
                            rep.PerformParameterChanges();

                            //ProgressReflector.RegisterReflector(reflectorBar);
                            printBarManagerMain.PrintControl.PrintingSystem = rep.PrintingSystem;
                            try
                            {
                                rep.PrintingSystem.ProgressReflector = reflectorBar;
                                rep.CreateDocument();
                            }
                            finally
                            {
                                rep.PrintingSystem.ResetProgressReflector();
                            }
                            fullScreenReport = rep;
                        }
                        else
                        {
                            MessageBox.Show(NO_UTILITY_INFO_WAS_FOUND, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        MessageBox.Show(PROJECT_IS_NULL, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                    }
                    progressBarControl1.Position = 0;
                }
                catch (DataAccessException)
                {
                    generate = false;
                    MessageBox.Show(DB_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        //---------------------------------------------------------------------------------------------

        //---------------------------------------------------------------------------------------------

        #endregion

        #region View

        //---------------------------------------------------------------------------------------------
        private void ShowFullScreen()
        {
            if (fullScreenReport != null)
            {
                fullScreenReport.ShowPreview();
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        //---------------------------------------------------------------------------------------------

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Handlers

        #region Report Related

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Generates the report
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void simpleButtonGenerate_Click(object sender, EventArgs e)
        {
            PerformPreGenerationCheck();
        }

        /// <summary>
        /// Shows the report in a report viewer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void barButtonItemShowFullScreen_ItemClick(object sender, ItemClickEventArgs e)
        {
            ShowFullScreen();
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Selection Related

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Clear the selected value in a drop down.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GridLookUp_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            if (e.Button.Kind == ButtonPredefines.Delete)
            {
                ((GridLookUpEdit) sender).EditValue = null;
                UIBLLInteraction.Instance.mainErrorProvider.SetError(sender as Control, string.Empty, ErrorType.None);
            }
        }

        /// <summary>
        /// Clears the filter after opening
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DropDown_QueryPopUp(object sender, CancelEventArgs e)
        {
            ((GridLookUpEdit) sender).Properties.View.ActiveFilterCriteria = string.Empty;
            ((GridLookUpEdit) sender).Properties.View.ActiveFilterString = string.Empty;
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Refresh

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Changes the lists of scenarios and component accroding to the selected project
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gridLookUpEditProject_EditValueChanged(object sender, EventArgs e)
        {
            UpdateProjectChildren();
            UpdateRecentSelection(sender as Control);
        }

        private void CheckedChanged(object sender, EventArgs e)
        {
            if (rep != null)
            {
                if (sender == checkEditHideBase)
                {
                    rep.HideBaseColumns.Value = checkEditHideBase.Checked;
                }
                else if (sender == checkEditHideProposed)
                {
                    rep.HideProposedColumns.Value = checkEditHideProposed.Checked;
                }
                else if (sender == checkEditHideSavingsColumns)
                {
                    rep.HideSavingsColumns.Value = checkEditHideSavingsColumns.Checked;
                }
                rep.PerformParameterChanges();
                var reflectorBar = new ReflectorBar(progressBarControl1);
                //ProgressReflector.RegisterReflector(reflectorBar);
                try
                {
                    rep.PrintingSystem.ProgressReflector = reflectorBar;
                    rep.CreateDocument();
                }
                finally
                {
                    rep.PrintingSystem.ResetProgressReflector();
                }
            }
            UpdateRecentSelection(sender as Control);
        }

        private void checkEditIncludeGuaranteeMultiplier_CheckedChanged(object sender, EventArgs e)
        {
            if (rep != null)
            {
                rep.IsGuaranteeMultiplierIncluded.Value = checkEditIncludeGuaranteeMultiplier.Checked;
                PerformPreGenerationCheck();
            }
            UpdateRecentSelection(sender as Control);
        }

        private void gridLookUpEditScenario1_EditValueChanged(object sender, EventArgs e)
        {
            UpdateRecentSelection(sender as Control);
        }

        private void comboBoxEditFilter_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            if (e.Button.Kind == ButtonPredefines.Delete)
            {
                comboBoxEditFilter.EditValue = null;
            }
        }

        /// <summary>
        /// Shows warning on drop down if not saved item was selected
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void gridLookUpEdit_Closed(object sender, ClosedEventArgs e)
        {
            if (e.CloseMode != PopupCloseMode.CloseUpKey &&
                e.CloseMode != PopupCloseMode.Cancel &&
                e.CloseMode != PopupCloseMode.Immediate)
            {
                if (((GridLookUpEdit) sender).EditValue == null)
                {
                    MessageBox.Show(ITEM_IS_NOT_SAVED, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
            }
        }

        private void ProjectsCollection_ListChanged(object sender, ListChangedEventArgs e)
        {
            if (e.ListChangedType == ListChangedType.ItemDeleted)
            {
                if (SelectedProject == null)
                {
                    gridLookUpEditProject.EditValue = null;
                    gridLookUpEditScenario1.EditValue = null;
                }
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        //---------------------------------------------------------------------------------------------

        //---------------------------------------------------------------------------------------------

        #endregion
    }
}