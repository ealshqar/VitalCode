//////////////////////////////////////////////////////////////////////////////
//  
//  <sourcefile name="AnnualCashFlowReportTab.cs" creationdate="3/3/09" owner="anasa" >
//
//      <project>McKinstry TCO Application</project>
//  
//      <description>The tab page for Annual Cash Flow Report area in tool</description>
//      
//      <copyright year="2008" company="McKinstry">
//          <notice>
//              Copyright © 2008 McKinstry. All rights reserved
//  
//              Developed for McKinstry by
//                  Equiom - MENA
//                  www.equiom.com
//          </notice>
//  
//  	<history date="3/3/09" modby="anasa">created</history>
//  
//////////////////////////////////////////////////////////////////////////////

#region Library Calls

//---------------------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using System.Xml;
using DevExpress.XtraBars;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraEditors.DXErrorProvider;
using DevExpress.XtraPrinting.Native;
using Equiom.Tco.BusinessLogicLayer;
using Equiom.Tco.DataAccessLayer;
using TCO.DesktopClientDevexpress.Properties;
using Application=Equiom.Tco.Common.Application;
using Component=Equiom.Tco.BusinessLogicLayer.Component;

//---------------------------------------------------------------------------------------------

#endregion

namespace TCO.DesktopClientDevexpress
{
    public partial class AnnualCashFlowReportTab : XtraTabPageEntity
    {
        #region Constants

        //---------------------------------------------------------------------------------------------
        private const string DB_ERROR = "Reports couldn't be generated, database contains corrupted data.";

        private const string NO_COMPONENT_SCENARIO_SELECTED =
            "At least one component and onr component must be selected.";

        private const string NO_COMPONENT_SELECTED = "At least one component must be selected.";

        private const string NO_PROJECT_SELECTED =
            "No project is selected, please select a project to generate the report for.";

        private const string NO_SCENARIO_SELECTED = "At least one scenario must be selected.";
        private const string NOTHING_SELECTED = "At least one scenario or component must be selected.";
        private const string PROJECT_IS_NULL = "The project you selected is empty or corrupted.";

        private const string SELECTED_COMPOENENT_ERROR1 = "The component ";
        private const string SELECTED_COMPOENENT_ERROR2 = " was deleted and won't be used in calcualtions.";

        private const string SELECTED_SCENARIO_ERROR1 = "The scenario ";
        private const string SELECTED_SCENARIO_ERROR2 = " was deleted and won't be used in calcualtions.";
        private ReportSelectionCriteria selection = ReportSelectionCriteria.None;
        //---------------------------------------------------------------------------------------------

        #endregion

        #region Fields

        //---------------------------------------------------------------------------------------------

        private Component component1;
        private Component component2;
        private AnnualCashFlowReport fullScreenReport;
        private bool generate = true;
        private Scenario scenario1;
        private Scenario scenario2;

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Properties

        //---------------------------------------------------------------------------------------------
        public Project SelectedProject
        {
            get
            {
                if (gridLookUpEditProject.EditValue != null)
                {
                    try
                    {
                        int projectId = Convert.ToInt32(gridLookUpEditProject.EditValue);
                        Project foundProject =
                            UIBLLInteraction.Instance.ProjectsCollection.FirstOrDefault(
                                project => project.Id == projectId);
                        if (foundProject != null)
                        {
                            foundProject.LazyLoadChildren();
                        }
                        return foundProject;
                    }
                    catch (FormatException)
                    {
                        return null;
                    }
                    catch (InvalidCastException)
                    {
                        return null;
                    }
                    catch (DataAccessException)
                    {
                        return null;
                    }
                }
                return null;
            }
        }

        public Int16 NPV
        {
            get { return Convert.ToInt16(spinEditNPV.Value); }
            set { spinEditNPV.Value = value; }
        }

        public double InflationRate
        {
            get { return Convert.ToDouble(spinEditInflationRate.Value); }
            set { spinEditInflationRate.Value = Convert.ToDecimal(value); }
        }

        public int ScallingFactor
        {
            get { return Convert.ToInt32(spinEditScalingFactor.Value); }
            set { spinEditScalingFactor.Value = value; }
        }

        public double DiscountRate
        {
            get { return Convert.ToDouble(spinEditDiscountRate.Value); }
            set { spinEditDiscountRate.Value = Convert.ToDecimal(value); }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Constructors

        //---------------------------------------------------------------------------------------------
        public AnnualCashFlowReportTab()
        {
            component1 = null;
            InitializeComponent();
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Methods

        #region Overriding Methods

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Initialize the binding for the controls in the tab
        /// </summary>
        public override void SetBinding()
        {
            try
            {
                EntityBarManager.Bars[1].Visible = false;
                TabTypeImage = Resources.AnnualCashFlow;
                ParentTab.Image = MergeImages(false);
                gridLookUpEditProject.Properties.DataSource = UIBLLInteraction.Instance.ProjectsCollection;
                UIBLLInteraction.Instance.ProjectsCollection.RaiseListChangedEvents = true;
                UIBLLInteraction.Instance.ProjectsCollection.ListChanged += ProjectsCollection_ListChanged;
                LoadLastSelectionCriteria();

                spinEditInflationRate.Properties.MaxValue = decimal.MaxValue/10;

                spinEditDiscountRate.Properties.MaxValue = decimal.MaxValue/10;
                spinEditDiscountRate.Properties.MinValue = 0;

                spinEditNPV.Properties.MaxValue = byte.MaxValue - 1;
                spinEditNPV.Properties.MinValue = Convert.ToInt16(0);

                spinEditScalingFactor.Properties.MaxValue = int.MaxValue;
                spinEditScalingFactor.Properties.MinValue = 1;

                spinEditInflationRate.EditValueChanging += UIBLLInteraction.Instance.spinEdit_EditValueChanging;
                spinEditDiscountRate.EditValueChanging += UIBLLInteraction.Instance.spinEdit_EditValueChanging;
                spinEditNPV.EditValueChanging += UIBLLInteraction.Instance.spinEdit_EditValueChanging;
                spinEditScalingFactor.EditValueChanging += UIBLLInteraction.Instance.spinEdit_EditValueChanging;
            }
            catch (DataAccessException dataAccessException)
            {
                Application.Logger.LogException(dataAccessException);
                UIBLLInteraction.Instance.ShowException(dataAccessException);
            }
        }

        /// <summary>
        /// Enables or disables the controls in the tab
        /// </summary>
        /// <param name="isReadOnly"></param>
        /// <param name="isChangedByUser"></param>
        public override void SetEditMode(bool isReadOnly, bool isChangedByUser)
        {
            //gridControlVendors.EmbeddedNavigator.Buttons.Remove.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.Append.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.Edit.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.EndEdit.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.CancelEdit.Visible = !isReadOnly;

            //gridViewVendors.OptionsBehavior.Editable = !isReadOnly;
        }

        /// <summary>
        /// Adds the current tab info to the dictionary so user can't close project without closing it first
        /// </summary>
        public override void AddParentIDToEditDictionary()
        {
            try
            {
                if (!UIBLLInteraction.Instance.OtherTabsEditDictionary.ContainsKey(TabTypes.AnnualCashFlow))
                {
                    UIBLLInteraction.Instance.OtherTabsEditDictionary.Add(TabTypes.AnnualCashFlow, ParentTab);
                }
            }
            catch (ArgumentException argumentException)
            {
                //UIBLLInteraction.Instance.ShowException(argumentException);
                Application.Logger.LogException(argumentException);
            }
            catch (NullReferenceException nullReferenceException)
            {
                //UIBLLInteraction.Instance.ShowException(nullReferenceException);
                Application.Logger.LogException(nullReferenceException);
            }
        }

        public override void ClearHandlers()
        {
            spinEditInflationRate.EditValueChanging -= UIBLLInteraction.Instance.spinEdit_EditValueChanging;
            spinEditDiscountRate.EditValueChanging -= UIBLLInteraction.Instance.spinEdit_EditValueChanging;
            spinEditNPV.EditValueChanging -= UIBLLInteraction.Instance.spinEdit_EditValueChanging;
            spinEditScalingFactor.EditValueChanging -= UIBLLInteraction.Instance.spinEdit_EditValueChanging;
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Selection Loading and update

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Loads the last selection criteria that the user selected when using the report last time
        /// </summary>
        public void LoadLastSelectionCriteria()
        {
            XmlDocument document = UIBLLInteraction.Instance.GetRecentsDocment();
            try
            {
                var projects = gridLookUpEditProject.Properties.DataSource as BusinessObjectList<Project>;
                Project loadedProject = null;
                XmlNode currentReportNode = document.SelectSingleNode("Root/AnnualCashFlow");
                if (currentReportNode != null)
                {
                    string value = currentReportNode.Attributes["Project"].Value;
                    if (value == "Null")
                    {
                        gridLookUpEditProject.EditValue = null;
                    }
                    else
                    {
                        try
                        {
                            if (projects != null)
                            {
                                if (value != null)
                                {
                                    loadedProject = projects.Single(project => project.Id == Convert.ToInt32(value));
                                }
                            }
                        }
                        catch (InvalidOperationException)
                        {
                        }
                        catch (InvalidCastException)
                        {
                        }
                        catch (FormatException)
                        {
                        }
                        if (loadedProject != null)
                        {
                            gridLookUpEditProject.EditValue = Convert.ToInt32(value);
                            loadedProject.LazyLoadChildren();
                            value = currentReportNode.Attributes["Scenario1"].Value;
                            if (value == "Null")
                            {
                                gridLookUpEditScenario1.EditValue = null;
                            }
                            else
                            {
                                scenario1 = null;
                                try
                                {
                                    scenario1 =
                                        loadedProject.Scenarios.Single(scenario => scenario.Id == Convert.ToInt32(value));
                                }
                                catch (InvalidOperationException)
                                {
                                }
                                catch (InvalidCastException)
                                {
                                }
                                catch (FormatException)
                                {
                                }
                                if (scenario1 != null)
                                {
                                    gridLookUpEditScenario1.EditValue = Convert.ToInt32(value);
                                }
                            }
                            value = currentReportNode.Attributes["Scenario2"].Value;
                            if (value == "Null")
                            {
                                gridLookUpEditScenario2.EditValue = null;
                            }
                            else
                            {
                                scenario2 = null;
                                try
                                {
                                    scenario2 =
                                        loadedProject.Scenarios.Single(scenario => scenario.Id == Convert.ToInt32(value));
                                }
                                catch (InvalidOperationException)
                                {
                                }
                                catch (InvalidCastException)
                                {
                                }
                                catch (FormatException)
                                {
                                }
                                if (scenario2 != null)
                                {
                                    gridLookUpEditScenario2.EditValue = Convert.ToInt32(value);
                                }
                            }
                            value = currentReportNode.Attributes["Component1"].Value;
                            if (value == "Null")
                            {
                                gridLookUpEditComponent1.EditValue = null;
                            }
                            else
                            {
                                component1 = null;
                                try
                                {
                                    component1 =
                                        loadedProject.Components.Single(
                                            component => component.Id == Convert.ToInt32(value));
                                }
                                catch (InvalidOperationException)
                                {
                                }
                                catch (InvalidCastException)
                                {
                                }
                                catch (FormatException)
                                {
                                }
                                if (component1 != null)
                                {
                                    gridLookUpEditComponent1.EditValue = Convert.ToInt32(value);
                                }
                            }
                            value = currentReportNode.Attributes["Component2"].Value;
                            if (value == "Null")
                            {
                                gridLookUpEditComponent2.EditValue = null;
                            }
                            else
                            {
                                component2 = null;
                                try
                                {
                                    component2 =
                                        loadedProject.Components.Single(
                                            component => component.Id == Convert.ToInt32(value));
                                }
                                catch (InvalidOperationException)
                                {
                                }
                                catch (InvalidCastException)
                                {
                                }
                                catch (FormatException)
                                {
                                }
                                if (component2 != null)
                                {
                                    gridLookUpEditComponent2.EditValue = Convert.ToInt32(value);
                                }
                            }
                        }
                    }
                }
                else
                {
                    MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (XmlException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
                //Catch exceptions during using a null value iterator
            catch (NullReferenceException nullReferenceException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
                Application.Logger.LogException(nullReferenceException);
            }
        }

        /// <summary>
        /// Update the XML file containing the recent selection criteria with the current selection
        /// </summary>
        private void UpdateRecentSelection(Control control)
        {
            try
            {
                XmlDocument document = UIBLLInteraction.Instance.GetRecentsDocment();
                if (control == gridLookUpEditProject)
                {
                    document.SelectSingleNode("Root/AnnualCashFlow").Attributes["Project"].Value =
                        (gridLookUpEditProject.EditValue == null) ? "Null" : gridLookUpEditProject.EditValue.ToString();
                }
                else if (control == gridLookUpEditScenario1)
                {
                    document.SelectSingleNode("Root/AnnualCashFlow").Attributes["Scenario1"].Value =
                        (gridLookUpEditScenario1.EditValue == null)
                            ? "Null"
                            : gridLookUpEditScenario1.EditValue.ToString();
                }
                else if (control == gridLookUpEditScenario2)
                {
                    document.SelectSingleNode("Root/AnnualCashFlow").Attributes["Scenario2"].Value =
                        (gridLookUpEditScenario2.EditValue == null)
                            ? "Null"
                            : gridLookUpEditScenario2.EditValue.ToString();
                }
                else if (control == gridLookUpEditComponent1)
                {
                    document.SelectSingleNode("Root/AnnualCashFlow").Attributes["Component1"].Value =
                        (gridLookUpEditComponent1.EditValue == null)
                            ? "Null"
                            : gridLookUpEditComponent1.EditValue.ToString();
                }
                else if (control == gridLookUpEditComponent2)
                {
                    document.SelectSingleNode("Root/AnnualCashFlow").Attributes["Component2"].Value =
                        (gridLookUpEditComponent2.EditValue == null)
                            ? "Null"
                            : gridLookUpEditComponent2.EditValue.ToString();
                }
                document.Save(UIBLLInteraction.Instance.TCORECENTS_FILE_NAME);
            }
            catch (NullReferenceException)
            {
            }
            catch (XmlException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Update After Selection

        //---------------------------------------------------------------------------------------------
        private void UpdateProjectChildren()
        {
            if (gridLookUpEditProject.EditValue != null)
            {
                try
                {
                    if (SelectedProject != null)
                    {
                        try
                        {
                            gridLookUpEditScenario1.Properties.DataSource = SelectedProject.Scenarios;
                            gridLookUpEditScenario2.Properties.DataSource = SelectedProject.Scenarios;

                            gridLookUpEditComponent1.Properties.DataSource = SelectedProject.Components;
                            gridLookUpEditComponent2.Properties.DataSource = SelectedProject.Components;

                            gridLookUpEditScenario1.EditValue = null;
                            gridLookUpEditScenario2.EditValue = null;
                            gridLookUpEditComponent1.EditValue = null;
                            gridLookUpEditComponent2.EditValue = null;

                            NPV = SelectedProject.NPV;
                            InflationRate = SelectedProject.InflationRate;
                            DiscountRate = SelectedProject.DiscountRate;
                        }
                        catch (NullReferenceException)
                        {
                        }
                        catch (DataAccessException)
                        {
                            MessageBox.Show(PROJECT_IS_NULL, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                            MessageBoxIcon.Error);
                        }
                    }
                }
                catch (NullReferenceException)
                {
                }
                catch (InvalidCastException)
                {
                }
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Report Generation

        #region Checking

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Checks the selection and if the report can be generated
        /// </summary>
        private void PerformPreGenerationCheck()
        {
            generate = true;
            SetSelectionValue();
            CheckSelectionValidity();
            GenerateAnnualCashFlowReport();
        }

        /// <summary>
        /// Analyze the current selection and the values of the selected items to check if the report can be generated
        /// </summary>
        private void CheckSelectionValidity()
        {
            if (gridLookUpEditProject.EditValue != null)
            {
                switch (selection)
                {
                    case ReportSelectionCriteria.Scenarios:
                        if (gridLookUpEditScenario1.EditValue == null && gridLookUpEditScenario2.EditValue == null)
                        {
                            generate = false;
                            MessageBox.Show(NO_SCENARIO_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else
                        {
                            SetScenarioValues();
                        }
                        break;
                    case ReportSelectionCriteria.Components:
                        if (gridLookUpEditComponent1.EditValue == null && gridLookUpEditComponent2.EditValue == null)
                        {
                            generate = false;
                            MessageBox.Show(NO_COMPONENT_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else
                        {
                            SetComponentValues();
                        }
                        break;
                    case ReportSelectionCriteria.Scenario1Component2:
                        if (gridLookUpEditComponent2.EditValue == null | gridLookUpEditScenario1.EditValue == null)
                        {
                            generate = false;
                            MessageBox.Show(NO_COMPONENT_SCENARIO_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else
                        {
                            SetScenario1Component2Values();
                        }
                        break;
                    case ReportSelectionCriteria.Scenario2Component1:
                        if (gridLookUpEditComponent1.EditValue == null | gridLookUpEditScenario2.EditValue == null)
                        {
                            generate = false;
                            MessageBox.Show(NO_COMPONENT_SCENARIO_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE,
                                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                        else
                        {
                            SetScenario2Component1Values();
                        }
                        break;
                    case ReportSelectionCriteria.None:
                        generate = false;
                        MessageBox.Show(NOTHING_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                        break;
                    default:
                        break;
                }
            }
            else
            {
                generate = false;
                MessageBox.Show(NO_PROJECT_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                MessageBoxIcon.Error);
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Setting Values

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Sets the values of screnario 2 and component 1
        /// </summary>
        private void SetScenario2Component1Values()
        {
            if (gridLookUpEditComponent1.EditValue != null)
            {
                component1 =
                    SelectedProject.Components.FirstOrDefault(
                        component => component.Id == Convert.ToInt32(gridLookUpEditComponent1.EditValue));
                if (component1 == null && gridLookUpEditComponent1.Text != null)
                {
                    MessageBox.Show(
                        SELECTED_COMPOENENT_ERROR1 + gridLookUpEditComponent1.Text + SELECTED_COMPOENENT_ERROR2,
                        UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    gridLookUpEditComponent1.EditValue = null;
                    SetSelectionValue();
                    CheckSelectionValidity();
                }
            }
            if (gridLookUpEditScenario2.EditValue != null)
            {
                scenario2 =
                    SelectedProject.Scenarios.FirstOrDefault(
                        scenario => scenario.Id == Convert.ToInt32(gridLookUpEditScenario2.EditValue));
                if (scenario2 == null && gridLookUpEditScenario2.Text != null)
                {
                    MessageBox.Show(SELECTED_SCENARIO_ERROR1 + gridLookUpEditScenario2.Text + SELECTED_SCENARIO_ERROR2,
                                    UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    gridLookUpEditScenario2.EditValue = null;
                    SetSelectionValue();
                    CheckSelectionValidity();
                }
            }
        }

        /// <summary>
        /// Sets the values of screnario 1 and component 2
        /// </summary>
        private void SetScenario1Component2Values()
        {
            if (gridLookUpEditComponent2.EditValue != null)
            {
                component2 =
                    SelectedProject.Components.FirstOrDefault(
                        component => component.Id == Convert.ToInt32(gridLookUpEditComponent2.EditValue));
                if (component2 == null && gridLookUpEditComponent2.Text != null)
                {
                    MessageBox.Show(
                        SELECTED_COMPOENENT_ERROR1 + gridLookUpEditComponent2.Text + SELECTED_COMPOENENT_ERROR2,
                        UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    gridLookUpEditComponent2.EditValue = null;
                    SetSelectionValue();
                    CheckSelectionValidity();
                }
            }
            if (gridLookUpEditScenario1.EditValue != null)
            {
                scenario1 =
                    SelectedProject.Scenarios.FirstOrDefault(
                        scenario => scenario.Id == Convert.ToInt32(gridLookUpEditScenario1.EditValue));
                if (scenario1 == null && gridLookUpEditScenario1.Text != null)
                {
                    MessageBox.Show(SELECTED_SCENARIO_ERROR1 + gridLookUpEditScenario1.Text + SELECTED_SCENARIO_ERROR2,
                                    UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    gridLookUpEditScenario1.EditValue = null;
                    SetSelectionValue();
                    CheckSelectionValidity();
                }
            }
        }

        /// <summary>
        /// Sets the values of the components
        /// </summary>
        private void SetComponentValues()
        {
            if (gridLookUpEditComponent1.EditValue != null)
            {
                component1 =
                    SelectedProject.Components.FirstOrDefault(
                        component => component.Id == Convert.ToInt32(gridLookUpEditComponent1.EditValue));
                if (component1 == null && gridLookUpEditComponent1.Text != null)
                {
                    MessageBox.Show(
                        SELECTED_COMPOENENT_ERROR1 + gridLookUpEditComponent1.Text + SELECTED_COMPOENENT_ERROR2,
                        UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    gridLookUpEditComponent1.EditValue = null;
                    SetSelectionValue();
                    CheckSelectionValidity();
                }
            }
            if (gridLookUpEditComponent2.EditValue != null)
            {
                component2 =
                    SelectedProject.Components.FirstOrDefault(
                        component => component.Id == Convert.ToInt32(gridLookUpEditComponent2.EditValue));
                if (component2 == null && gridLookUpEditComponent2.Text != null)
                {
                    MessageBox.Show(
                        SELECTED_COMPOENENT_ERROR1 + gridLookUpEditComponent2.Text + SELECTED_COMPOENENT_ERROR2,
                        UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    gridLookUpEditComponent2.EditValue = null;
                    SetSelectionValue();
                    CheckSelectionValidity();
                }
            }
        }

        /// <summary>
        /// Sets the values of the scenarios
        /// </summary>
        private void SetScenarioValues()
        {
            if (gridLookUpEditScenario1.EditValue != null)
            {
                scenario1 =
                    SelectedProject.Scenarios.FirstOrDefault(
                        scenario => scenario.Id == Convert.ToInt32(gridLookUpEditScenario1.EditValue));
                if (scenario1 == null && gridLookUpEditScenario1.Text != null)
                {
                    MessageBox.Show(SELECTED_SCENARIO_ERROR1 + gridLookUpEditScenario1.Text + SELECTED_SCENARIO_ERROR2,
                                    UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    gridLookUpEditScenario1.EditValue = null;
                    SetSelectionValue();
                    CheckSelectionValidity();
                }
            }
            if (gridLookUpEditScenario2.EditValue != null)
            {
                scenario2 =
                    SelectedProject.Scenarios.FirstOrDefault(
                        scenario => scenario.Id == Convert.ToInt32(gridLookUpEditScenario2.EditValue));
                if (scenario2 == null && gridLookUpEditScenario2.Text != null)
                {
                    MessageBox.Show(SELECTED_SCENARIO_ERROR1 + gridLookUpEditScenario2.Text + SELECTED_SCENARIO_ERROR2,
                                    UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    gridLookUpEditScenario2.EditValue = null;
                    SetSelectionValue();
                    CheckSelectionValidity();
                }
            }
        }

        /// <summary>
        /// Sets the value of the selection enum
        /// </summary>
        private void SetSelectionValue()
        {
            scenario1 = null;
            scenario2 = null;
            component1 = null;
            component2 = null;

            if (gridLookUpEditComponent2.EditValue != null && gridLookUpEditScenario1.EditValue != null)
            {
                selection = ReportSelectionCriteria.Scenario1Component2;
            }
            else if (gridLookUpEditComponent1.EditValue != null && gridLookUpEditScenario2.EditValue != null)
            {
                selection = ReportSelectionCriteria.Scenario2Component1;
            }
            else if (gridLookUpEditScenario1.EditValue != null || gridLookUpEditScenario2.EditValue != null)
            {
                selection = ReportSelectionCriteria.Scenarios;
            }
            else if (gridLookUpEditComponent1.EditValue != null || gridLookUpEditComponent2.EditValue != null)
            {
                selection = ReportSelectionCriteria.Components;
            }
            else
            {
                selection = ReportSelectionCriteria.None;
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Report Generate

        //---------------------------------------------------------------------------------------------
        private void GenerateAnnualCashFlowReport()
        {
            if (generate)
            {
                barButtonItemFullScreen.Enabled = true;
                var manager = new FinancialCalculationsManager();
                DataTable repTable = null;
                try
                {
                    switch (selection)
                    {
                        case ReportSelectionCriteria.Scenarios:
                            if (scenario1 != null && scenario2 != null)
                            {
                                repTable = manager.GetCasFlowDeltaBetweenTwoScenarios(scenario1, scenario2, NPV,
                                                                                      InflationRate, ScallingFactor);
                            }
                            else if (scenario1 != null)
                            {
                                repTable = manager.GetCashFlowReportByScenario(scenario1, NPV, InflationRate,
                                                                               ScallingFactor);
                            }
                            else if (scenario2 != null)
                            {
                                repTable = manager.GetCashFlowReportByScenario(scenario2, NPV, InflationRate,
                                                                               ScallingFactor);
                            }
                            break;
                        case ReportSelectionCriteria.Components:
                            if (component1 != null && component2 != null)
                            {
                                repTable = manager.GetCasFlowDeltaBetweenTwoComponents(component1, component2, NPV,
                                                                                       InflationRate, ScallingFactor);
                            }
                            else if (component1 != null)
                            {
                                repTable = manager.GetCashFlowReportByComponent(component1, NPV, InflationRate,
                                                                                ScallingFactor);
                            }
                            else if (component2 != null)
                            {
                                repTable = manager.GetCashFlowReportByComponent(component2, NPV, InflationRate,
                                                                                ScallingFactor);
                            }
                            break;
                        case ReportSelectionCriteria.Scenario1Component2:
                            repTable = manager.GetCasFlowDeltaBetweenScenarioAndComponent(scenario1, component2, NPV,
                                                                                          InflationRate, ScallingFactor);
                            break;
                        case ReportSelectionCriteria.Scenario2Component1:
                            repTable = manager.GetCasFlowDeltaBetweenScenarioAndComponent(component1, scenario2, NPV,
                                                                                          InflationRate, ScallingFactor);
                            break;
                        default:
                            break;
                    }
                    var reflectorBar = new ReflectorBar(progressBarControl1);
                    var rep = new AnnualCashFlowReport();
                    if (SelectedProject != null)
                    {
                        switch (selection)
                        {
                            case ReportSelectionCriteria.Scenarios:
                                rep.SetSelectionCriteriaValue(gridLookUpEditProject.Text, selection,
                                                              gridLookUpEditScenario1.Text, gridLookUpEditScenario2.Text);
                                break;
                            case ReportSelectionCriteria.Components:
                                rep.SetSelectionCriteriaValue(gridLookUpEditProject.Text, selection,
                                                              gridLookUpEditComponent1.Text,
                                                              gridLookUpEditComponent2.Text);
                                break;
                            case ReportSelectionCriteria.Scenario1Component2:
                                rep.SetSelectionCriteriaValue(gridLookUpEditProject.Text, selection,
                                                              gridLookUpEditScenario1.Text,
                                                              gridLookUpEditComponent2.Text);
                                break;
                            case ReportSelectionCriteria.Scenario2Component1:
                                rep.SetSelectionCriteriaValue(gridLookUpEditProject.Text, selection,
                                                              gridLookUpEditComponent1.Text,
                                                              gridLookUpEditScenario2.Text);
                                break;
                            default:
                                break;
                        }

                        //ProgressReflector.RegisterReflector(reflectorBar);
                        rep.Project = SelectedProject;
                        rep.DataSource = repTable;
                        rep.InflationRate = InflationRate;
                        rep.DiscountRate = DiscountRate;
                        rep.GenerateColumns(NPV, SelectedProject);
                        printBarManagerMain.PrintControl.PrintingSystem = rep.PrintingSystem;

                        try
                        {
                            rep.PrintingSystem.ProgressReflector = reflectorBar;
                            rep.CreateDocument();
                        }
                        finally
                        {
                            rep.PrintingSystem.ResetProgressReflector();
                        }

                        fullScreenReport = rep;
                    }
                    else
                    {
                        MessageBox.Show(PROJECT_IS_NULL, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                        MessageBoxIcon.Error);
                    }

                    progressBarControl1.Position = 0;
                    //ProgressReflector.UnregisterReflector(reflectorBar);
                }
                catch (DataAccessException)
                {
                    generate = false;
                    MessageBox.Show(DB_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK,
                                    MessageBoxIcon.Error);
                }
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        //---------------------------------------------------------------------------------------------

        //---------------------------------------------------------------------------------------------

        #endregion

        #region View

        //---------------------------------------------------------------------------------------------
        private void ShowFullScreen()
        {
            if (fullScreenReport != null)
            {
                fullScreenReport.ShowPreview();
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        //---------------------------------------------------------------------------------------------

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Handlers

        #region Report Related

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Generates the report
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void simpleButtonGenerate_Click(object sender, EventArgs e)
        {
            PerformPreGenerationCheck();
        }

        /// <summary>
        /// Shows the report in a report viewer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void barButtonItemShowFullScreen_ItemClick(object sender, ItemClickEventArgs e)
        {
            ShowFullScreen();
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Selection Related

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Clear the selected value in a drop down.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GridLookUp_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            if (e.Button.Kind == ButtonPredefines.Delete)
            {
                ((GridLookUpEdit) sender).EditValue = null;
                UIBLLInteraction.Instance.mainErrorProvider.SetError(sender as Control, string.Empty, ErrorType.None);
            }
        }

        /// <summary>
        /// Clears component 1 if scenario 1 is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gridLookUpEditScenario1_EditValueChanged(object sender, EventArgs e)
        {
            if (gridLookUpEditScenario1.Focused)
            {
                gridLookUpEditComponent1.EditValue = null;
            }
            UpdateRecentSelection(sender as Control);
        }

        /// <summary>
        /// Clears component 2 if scenario 2 is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gridLookUpEditScenario2_EditValueChanged(object sender, EventArgs e)
        {
            if (gridLookUpEditScenario2.Focused)
            {
                gridLookUpEditComponent2.EditValue = null;
            }
            UpdateRecentSelection(sender as Control);
        }

        /// <summary>
        /// Clears scenario 1 if component 1 is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gridLookUpEditComponent1_EditValueChanged(object sender, EventArgs e)
        {
            if (gridLookUpEditComponent1.Focused)
            {
                gridLookUpEditScenario1.EditValue = null;
            }
            UpdateRecentSelection(sender as Control);
        }

        /// <summary>
        /// Clears scenario 2 if component 2 is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gridLookUpEditComponent2_EditValueChanged(object sender, EventArgs e)
        {
            if (gridLookUpEditComponent2.Focused)
            {
                gridLookUpEditScenario2.EditValue = null;
            }
            UpdateRecentSelection(sender as Control);
        }

        /// <summary>
        /// Clears the filter after opening
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DropDown_QueryPopUp(object sender, CancelEventArgs e)
        {
            ((GridLookUpEdit) sender).Properties.View.ActiveFilterCriteria = string.Empty;
            ((GridLookUpEdit) sender).Properties.View.ActiveFilterString = string.Empty;
        }

        private void ProjectsCollection_ListChanged(object sender, ListChangedEventArgs e)
        {
            if (e.ListChangedType == ListChangedType.ItemDeleted)
            {
                if (SelectedProject == null)
                {
                    gridLookUpEditProject.EditValue = null;
                    gridLookUpEditScenario1.EditValue = null;
                    gridLookUpEditScenario2.EditValue = null;
                    gridLookUpEditComponent1.EditValue = null;
                    gridLookUpEditComponent2.EditValue = null;
                }
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        #region Refresh

        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Changes the lists of scenarios and component accroding to the selected project
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gridLookUpEditProject_EditValueChanged(object sender, EventArgs e)
        {
            UpdateProjectChildren();
            UpdateRecentSelection(sender as Control);
        }

        private void printControlMain_Load(object sender, EventArgs e)
        {
        }

        /// <summary>
        /// Shows warning on drop down if not saved item was selected
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void gridLookUpEdit_Closed(object sender, ClosedEventArgs e)
        {
            if (e.CloseMode != PopupCloseMode.CloseUpKey &&
                e.CloseMode != PopupCloseMode.Cancel &&
                e.CloseMode != PopupCloseMode.Immediate)
            {
                if (((GridLookUpEdit) sender).EditValue == null)
                {
                    UIBLLInteraction.Instance.mainErrorProvider.SetError(sender as Control, ITEM_IS_NOT_SAVED,
                                                                         ErrorType.Warning);
                }
                else
                {
                    UIBLLInteraction.Instance.mainErrorProvider.SetError(sender as Control, string.Empty, ErrorType.None);
                }
            }
        }

        //---------------------------------------------------------------------------------------------

        #endregion

        //---------------------------------------------------------------------------------------------

        //---------------------------------------------------------------------------------------------

        #endregion
    }
}