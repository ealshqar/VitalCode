//////////////////////////////////////////////////////////////////////////////
//  
//  <sourcefile name="AssetImpactsDetailReportTab.cs" creationdate="3/3/09" owner="anasa" >
//
//      <project>McKinstry TCO Application</project>
//  
//      <description>The tab page for Annual Cash Flow Report area in tool</description>
//      
//      <copyright year="2008" company="McKinstry">
//          <notice>
//              Copyright © 2008 McKinstry. All rights reserved
//  
//              Developed for McKinstry by
//                  Equiom - MENA
//                  www.equiom.com
//          </notice>
//  
//  	<history date="3/3/09" modby="anasa">created</history>
//  
//////////////////////////////////////////////////////////////////////////////

#region Library Calls
//---------------------------------------------------------------------------------------------
using System;
using System.Data;
using System.ComponentModel;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Equiom.Tco.BusinessLogicLayer;
using Equiom.Tco.DataAccessLayer;
using System.Linq;
using DevExpress.XtraPrinting;
using DevExpress.XtraPrinting.Native;
using System.Xml;
using System.Xml.XPath;
//---------------------------------------------------------------------------------------------
#endregion

namespace TCO.DesktopClientDevexpress
{
    public partial class AssetImpactsDetailReportTab : XtraTabPageEntity
    {
        #region Constants
        //---------------------------------------------------------------------------------------------
        private const string DB_ERROR = "Reports couldn't be generated, database contains corrupted data.";
        private const string NO_PROJECT_SELECTED = "No project is selected, please select a project to generate the report for.";
        private const string NO_SCENARIO_SELECTED = "A scenario must be selected to generate the report.";
        private const string PROJECT_IS_NULL = "The project you selected is empty or corrupted.";
        private const string NO_UTILITY_INFO_WAS_FOUND = "No information was found for your selection.";

        private const string SELECTED_SCENARIO_ERROR1 = "The Scenario ";
        private const string SELECTED_SCENARIO_ERROR2 = " was deleted and won't be used in the report.";
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Fields
        //---------------------------------------------------------------------------------------------
        AssetImpactsDetailReport fullScreenReport;
        AssetImpactsDetailReport rep;
        private Scenario currentScenario;

        bool generate = true;
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Properties
        //---------------------------------------------------------------------------------------------
        public Project SelectedProject
        {
            get 
            {
                if (gridLookUpEditProject.EditValue != null)
                {
                    
                    try
                    {
                        int projectId = Convert.ToInt32(gridLookUpEditProject.EditValue);
                        Project foundProject = UIBLLInteraction.Instance.ProjectsCollection.FirstOrDefault(project => project.Id == projectId);
                        if (foundProject != null)
                        {
                            foundProject.LazyLoadChildren();
                        }
                        return foundProject;
                    }
                    catch (FormatException)
                    {
                        return null;
                    }
                    catch (InvalidCastException)
                    {
                        return null;
                    }
                    catch (DataAccessException)
                    {
                        return null;
                    }
                }
                return null;
            }
        }
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Constructors
        //---------------------------------------------------------------------------------------------
        public AssetImpactsDetailReportTab()
        {
            InitializeComponent();
        }
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Methods
        //---------------------------------------------------------------------------------------------
        #region Overriding Methods
        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Initialize the binding for the controls in the tab
        /// </summary>
        public override void SetBinding()
        {
            try
            {
                EntityBarManager.Bars[1].Visible = false;
                TabTypeImage = Properties.Resources.AssetImpacts;
                ParentTab.Image = MergeImages(false);
                gridLookUpEditProject.Properties.DataSource = UIBLLInteraction.Instance.ProjectsCollection;
                UIBLLInteraction.Instance.ProjectsCollection.RaiseListChangedEvents = true;
                UIBLLInteraction.Instance.ProjectsCollection.ListChanged += new ListChangedEventHandler(ProjectsCollection_ListChanged);
                LoadLastSelectionCriteria();
            }
            catch (DataAccessException dataAccessException)
            {
                Equiom.Tco.Common.Application.Logger.LogException(dataAccessException);
                UIBLLInteraction.Instance.ShowException(dataAccessException);
            }
        }

        private void ProjectsCollection_ListChanged(object sender, ListChangedEventArgs e)
        {
            if(e.ListChangedType == ListChangedType.ItemDeleted)
            {
                if(SelectedProject == null)
                {
                    gridLookUpEditProject.EditValue = null;
                    gridLookUpEditScenario1.EditValue = null;
                }
            }
        }

        /// <summary>
        /// Enables or disables the controls in the tab
        /// </summary>
        /// <param name="isReadOnly"></param>
        /// <param name="isChangedByUser"></param>
        public override void SetEditMode(bool isReadOnly, bool isChangedByUser)
        {
            //gridControlVendors.EmbeddedNavigator.Buttons.Remove.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.Append.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.Edit.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.EndEdit.Visible = !isReadOnly;
            //gridControlVendors.EmbeddedNavigator.Buttons.CancelEdit.Visible = !isReadOnly;

            //gridViewVendors.OptionsBehavior.Editable = !isReadOnly;
        }

        /// <summary>
        /// Adds the current tab info to the dictionary so user can't close project without closing it first
        /// </summary>
        public override void AddParentIDToEditDictionary()
        {
            try
            {
                if (!UIBLLInteraction.Instance.OtherTabsEditDictionary.ContainsKey(TabTypes.AssetImpactsReport))
                {
                    UIBLLInteraction.Instance.OtherTabsEditDictionary.Add(TabTypes.AssetImpactsReport, ParentTab);
                }
            }
            catch (ArgumentException argumentException)
            {
                //UIBLLInteraction.Instance.ShowException(argumentException);
                Equiom.Tco.Common.Application.Logger.LogException(argumentException);
            }
            catch (NullReferenceException nullReferenceException)
            {
                //UIBLLInteraction.Instance.ShowException(nullReferenceException);
                Equiom.Tco.Common.Application.Logger.LogException(nullReferenceException);
            }
        }

        /// <summary>
        /// Clears all handler used in the tab
        /// </summary>
        public override void ClearHandlers()
        {
        }
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Selection Loading and update
        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Loads the last selection criteria that the user selected when using the report last time
        /// </summary>
        public void LoadLastSelectionCriteria()
        {
            var document = UIBLLInteraction.Instance.GetRecentsDocment();
            try
            {
                var projects = gridLookUpEditProject.Properties.DataSource as BusinessObjectList<Project>;
                
                XmlNode currentReportNode = document.SelectSingleNode("Root/AssetImpactsDetailReport");
                if (currentReportNode != null)
                {
                    string value = currentReportNode.Attributes["Project"].Value;
                    if (value != "Null")
                    {
                        gridLookUpEditProject.EditValue = Convert.ToInt32(value);
                        value = currentReportNode.Attributes["Scenario"].Value;
                        if (value != "Null")
                        {
                            gridLookUpEditScenario1.EditValue = Convert.ToInt32(value);
                        }

                        value = currentReportNode.Attributes["SelectAllComponents"].Value;
                        checkEditSelectAllComponents.Checked = Convert.ToBoolean(value);
                    }
                }
                else
                {
                    MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            catch (XmlException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            //Catch exceptions during using a null value iterator
            catch (NullReferenceException nullReferenceException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                Equiom.Tco.Common.Application.Logger.LogException(nullReferenceException);
            }
        }

        /// <summary>
        /// Update the XML file containing the recent selection criteria with the current selection
        /// </summary>
        private void UpdateRecentSelection(Control control)
        {
            try
            {
                var document = UIBLLInteraction.Instance.GetRecentsDocment();
                if (control == gridLookUpEditProject)
                {
                    document.SelectSingleNode("Root/AssetImpactsDetailReport").Attributes["Project"].Value = (gridLookUpEditProject.EditValue == null) ? "Null" : gridLookUpEditProject.EditValue.ToString();
                }
                else if (control == gridLookUpEditScenario1)
                {
                    document.SelectSingleNode("Root/AssetImpactsDetailReport").Attributes["Scenario"].Value = (gridLookUpEditScenario1.EditValue == null) ? "Null" : gridLookUpEditScenario1.EditValue.ToString();
                }
                else if (control == checkEditSelectAllComponents)
                {
                    document.SelectSingleNode("Root/AssetImpactsDetailReport").Attributes["SelectAllComponents"].Value = checkEditSelectAllComponents.Checked.ToString();
                }
                document.Save(UIBLLInteraction.Instance.TCORECENTS_FILE_NAME);
            }
            catch (NullReferenceException)
            {
            }
            catch (XmlException)
            {
                MessageBox.Show(UIBLLInteraction.RECENT_SELECTION_FILE_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Update After Selection
        //---------------------------------------------------------------------------------------------
        private void UpdateProjectChildren()
        {
            if (gridLookUpEditProject.EditValue != null)
            {
                try
                {
                    if (SelectedProject != null)
                    {
                        try
                        {
                            gridLookUpEditScenario1.Properties.DataSource = SelectedProject.Scenarios;
                            Scenario activeScenario = SelectedProject.Scenarios.FirstOrDefault(scenario => scenario.Id.HasValue && scenario.IsActive);
                            if(activeScenario != null)
                            {
                                gridLookUpEditScenario1.EditValue = activeScenario.Id.Value;    
                            }
                            else
                            {
                                gridLookUpEditScenario1.EditValue = null;
                            }
                        }
                        catch (NullReferenceException)
                        {
                        }
                        catch (DataAccessException)
                        {
                            MessageBox.Show(PROJECT_IS_NULL, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                }
                catch (NullReferenceException)
                {
                }
                catch (InvalidCastException)
                {
                }
            }
        }
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Report Generation
        //---------------------------------------------------------------------------------------------
        #region Checking
        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Checks the selection and if the report can be generated
        /// </summary>
        private void PerformPreGenerationCheck()
        {
            generate = true;
            if (gridLookUpEditProject.EditValue != null && SelectedProject != null)
            {
                if(!checkEditSelectAllComponents.Checked)
                {
                    if (gridLookUpEditScenario1.EditValue != null)
                    {
                        currentScenario = SelectedProject.Scenarios.FirstOrDefault(scenario => scenario.Id == Convert.ToInt32(gridLookUpEditScenario1.EditValue));
                        if (currentScenario == null && gridLookUpEditScenario1.Text != null)
                        {
                            MessageBox.Show(SELECTED_SCENARIO_ERROR1 + gridLookUpEditScenario1.Text + SELECTED_SCENARIO_ERROR2,
                                UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                            gridLookUpEditScenario1.EditValue = null;
                            generate = false;
                        }
                    }
                    else
                    {
                        generate = false;
                        MessageBox.Show(NO_SCENARIO_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    } 
                }
            }
            else
            {
                generate = false;
                MessageBox.Show(NO_PROJECT_SELECTED, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            GenerateReport();
        }
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Report Generate
        //---------------------------------------------------------------------------------------------
        private void GenerateReport()
        {
            if (generate)
            {
                try
                {
                    var reflectorBar = new ReflectorBar(progressBarControl1);
                    bool scenarioCheckOk = false;
                    scenarioCheckOk = (checkEditSelectAllComponents.Checked)? true: ((currentScenario != null) ? true : false);
                    if (SelectedProject != null && scenarioCheckOk)
                    {
                        var omReportManager = new ComponentModulesReportsManager();
                        BusinessObjectList<AssetImpactDetailsReportRecord> reportData = null;
                        if(checkEditSelectAllComponents.Checked)
                        {
                            reportData = omReportManager.GenerateAssetImpactDetailsReportByProject(SelectedProject.Id.Value);
                        }
                        else
                        {
                            reportData =omReportManager.GenerateAssetImpactDetailsReportByScenario(currentScenario.Id.Value);
                        }

                        if (reportData.Count > 0)
                        {
                            barButtonItemFullScreen.Enabled = true;
                            rep = new AssetImpactsDetailReport();
                            rep.bindingSource1.DataSource = reportData;
                            rep.GenerationDate.Value = DateTime.Now;
                            rep.ProjectName.Value = gridLookUpEditProject.Text;
                            rep.Customer.Value = SelectedProject.ProjectCustomer;
                            if(SelectedProject.ComponentCaption != null && SelectedProject.ComponentCaption != string.Empty)
                            {
                                rep.SetComponentCaption(SelectedProject.ComponentCaption);
                            }
                            else
                            {
                                rep.SetComponentCaption("Component"); 
                            }
                            
                            if (checkEditSelectAllComponents.Checked)
                            {
                                rep.ScenarioName.Value = "All Components";
                            }
                            else
                            {
                                rep.ScenarioName.Value = gridLookUpEditScenario1.Text;
                            }
                            ProgressReflector.RegisterReflector(reflectorBar);
                            printBarManagerMain.PrintControl.PrintingSystem = rep.PrintingSystem;
                            try
                            {
                                rep.PrintingSystem.ProgressReflector = reflectorBar;
                                rep.CreateDocument();
                            }
                            finally
                            {
                                rep.PrintingSystem.ResetProgressReflector();
                            }
                            fullScreenReport = rep;
                        }
                        else
                        {
                            MessageBox.Show(NO_UTILITY_INFO_WAS_FOUND, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    }
                    else
                    {
                        MessageBox.Show(PROJECT_IS_NULL, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    progressBarControl1.Position = 0;
                }
                catch (DataAccessException dataAccessException)
                {
                    generate = false;
                    MessageBox.Show(DB_ERROR, UIBLLInteraction.ERROR_MESSAGE_TITLE, MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }
        //---------------------------------------------------------------------------------------------
        #endregion
        //---------------------------------------------------------------------------------------------
        #endregion

        #region View
        //---------------------------------------------------------------------------------------------
        private void ShowFullScreen()
        {
            if (fullScreenReport != null)
            {
                fullScreenReport.ShowPreview();
            }
        }
        //---------------------------------------------------------------------------------------------
        #endregion
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Handlers
        //---------------------------------------------------------------------------------------------
        #region Report Related
        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Generates the report
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void simpleButtonGenerate_Click(object sender, EventArgs e)
        {
            PerformPreGenerationCheck();
        }

        /// <summary>
        /// Shows the report in a report viewer
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void barButtonItemShowFullScreen_ItemClick(object sender, DevExpress.XtraBars.ItemClickEventArgs e)
        {
            ShowFullScreen();
        }
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Selection Related
        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Clear the selected value in a drop down.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void GridLookUp_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            if (e.Button.Kind == DevExpress.XtraEditors.Controls.ButtonPredefines.Delete)
            {
                ((GridLookUpEdit) sender).EditValue = null;
                UIBLLInteraction.Instance.mainErrorProvider.SetError(sender as Control, string.Empty, DevExpress.XtraEditors.DXErrorProvider.ErrorType.None);
            }
        }

        /// <summary>
        /// Clears component 1 if scenario 1 is changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gridLookUpEditScenario1_EditValueChanged(object sender, EventArgs e)
        {
            UpdateRecentSelection(sender as Control);
        }
      
        /// <summary>
        /// Clears the filter after opening
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void DropDown_QueryPopUp(object sender, System.ComponentModel.CancelEventArgs e)
        {
            ((GridLookUpEdit) sender).Properties.View.ActiveFilterCriteria = string.Empty;
            ((GridLookUpEdit) sender).Properties.View.ActiveFilterString = string.Empty;
        }
        //---------------------------------------------------------------------------------------------
        #endregion

        #region Refresh
        //---------------------------------------------------------------------------------------------
        /// <summary>
        /// Changes the lists of scenarios and component accroding to the selected project
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void gridLookUpEditProject_EditValueChanged(object sender, EventArgs e)
        {
            UpdateProjectChildren();
            UpdateRecentSelection(sender as Control);
        }

        private void printControlMain_Load(object sender, EventArgs e)
        {

        }
        /// <summary>
        /// Shows warning on drop down if not saved item was selected
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void gridLookUpEdit_Closed(object sender, DevExpress.XtraEditors.Controls.ClosedEventArgs e)
        {
            if (e.CloseMode != PopupCloseMode.CloseUpKey &&
                e.CloseMode != PopupCloseMode.Cancel &&
                e.CloseMode != PopupCloseMode.Immediate)
            {
                if ((sender as GridLookUpEdit).EditValue == null)
                {
                    UIBLLInteraction.Instance.mainErrorProvider.SetError(sender as Control, ITEM_IS_NOT_SAVED, DevExpress.XtraEditors.DXErrorProvider.ErrorType.Warning);
                }
                else
                {
                    UIBLLInteraction.Instance.mainErrorProvider.SetError(sender as Control, string.Empty, DevExpress.XtraEditors.DXErrorProvider.ErrorType.None);
                }
            }
        }

        private void CheckEdit_CheckedChanged(object sender, EventArgs e)
        {
            UpdateRecentSelection(sender as Control);
        }

        private void radioGroupCompnentSortMethod_SelectedIndexChanged(object sender, EventArgs e)
        {
            UpdateRecentSelection(sender as Control);
        }

        private void spinEditFCLPM_EditValueChanged(object sender, EventArgs e)
        {
            UpdateRecentSelection(sender as Control);
        }

        private void checkEditSelectAllScenarios_EditValueChanged(object sender, EventArgs e)
        {
            gridLookUpEditScenario1.Enabled = !checkEditSelectAllComponents.Checked;
            if(checkEditSelectAllComponents.Checked)
            {
                UIBLLInteraction.Instance.mainErrorProvider.SetError(gridLookUpEditScenario1, string.Empty, DevExpress.XtraEditors.DXErrorProvider.ErrorType.None);
            }
        }
        //---------------------------------------------------------------------------------------------
        #endregion
        //---------------------------------------------------------------------------------------------
        #endregion   
    }
}

